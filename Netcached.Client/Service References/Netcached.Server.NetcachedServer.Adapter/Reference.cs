//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Netcached.Client.Netcached.Server.NetcachedServer.Adapter {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Netcached.Server.NetcachedServer.Adapter.INetcachedServer")]
    public interface INetcachedServer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetcachedServer/Set", ReplyAction="http://tempuri.org/INetcachedServer/SetResponse")]
        bool Set(string key, byte[] data, int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetcachedServer/Set", ReplyAction="http://tempuri.org/INetcachedServer/SetResponse")]
        System.Threading.Tasks.Task<bool> SetAsync(string key, byte[] data, int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetcachedServer/Delete", ReplyAction="http://tempuri.org/INetcachedServer/DeleteResponse")]
        bool Delete(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetcachedServer/Delete", ReplyAction="http://tempuri.org/INetcachedServer/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetcachedServer/Get", ReplyAction="http://tempuri.org/INetcachedServer/GetResponse")]
        byte[] Get(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetcachedServer/Get", ReplyAction="http://tempuri.org/INetcachedServer/GetResponse")]
        System.Threading.Tasks.Task<byte[]> GetAsync(string key);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INetcachedServerChannel : Netcached.Server.NetcachedServer.Adapter.INetcachedServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NetcachedServerClient : System.ServiceModel.ClientBase<Netcached.Server.NetcachedServer.Adapter.INetcachedServer>, Netcached.Server.NetcachedServer.Adapter.INetcachedServer {
        
        public NetcachedServerClient() {
        }
        
        public NetcachedServerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NetcachedServerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NetcachedServerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NetcachedServerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Set(string key, byte[] data, int priority = 0) {
            return base.Channel.Set(key, data, priority);
        }
        
        public System.Threading.Tasks.Task<bool> SetAsync(string key, byte[] data, int priority = 0) {
            return base.Channel.SetAsync(key, data, priority);
        }
        
        public bool Delete(string key) {
            return base.Channel.Delete(key);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(string key) {
            return base.Channel.DeleteAsync(key);
        }
        
        public byte[] Get(string key) {
            return base.Channel.Get(key);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetAsync(string key) {
            return base.Channel.GetAsync(key);
        }
    }
}
